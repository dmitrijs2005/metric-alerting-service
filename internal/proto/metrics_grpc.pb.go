// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/proto/metrics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricService_UpdateMetricValue_FullMethodName          = "/metric.alerting.service.MetricService/UpdateMetricValue"
	MetricService_UpdateMetricValueEncrypted_FullMethodName = "/metric.alerting.service.MetricService/UpdateMetricValueEncrypted"
)

// MetricServiceClient is the client API for MetricService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Stat service definition.
type MetricServiceClient interface {
	UpdateMetricValue(ctx context.Context, in *UpdateMetricValueRequest, opts ...grpc.CallOption) (*UpdateMetricValueResponse, error)
	UpdateMetricValueEncrypted(ctx context.Context, in *EncryptedMessage, opts ...grpc.CallOption) (*UpdateMetricValueResponse, error)
}

type metricServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricServiceClient(cc grpc.ClientConnInterface) MetricServiceClient {
	return &metricServiceClient{cc}
}

func (c *metricServiceClient) UpdateMetricValue(ctx context.Context, in *UpdateMetricValueRequest, opts ...grpc.CallOption) (*UpdateMetricValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetricValueResponse)
	err := c.cc.Invoke(ctx, MetricService_UpdateMetricValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricServiceClient) UpdateMetricValueEncrypted(ctx context.Context, in *EncryptedMessage, opts ...grpc.CallOption) (*UpdateMetricValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetricValueResponse)
	err := c.cc.Invoke(ctx, MetricService_UpdateMetricValueEncrypted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricServiceServer is the server API for MetricService service.
// All implementations must embed UnimplementedMetricServiceServer
// for forward compatibility.
//
// Stat service definition.
type MetricServiceServer interface {
	UpdateMetricValue(context.Context, *UpdateMetricValueRequest) (*UpdateMetricValueResponse, error)
	UpdateMetricValueEncrypted(context.Context, *EncryptedMessage) (*UpdateMetricValueResponse, error)
	mustEmbedUnimplementedMetricServiceServer()
}

// UnimplementedMetricServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricServiceServer struct{}

func (UnimplementedMetricServiceServer) UpdateMetricValue(context.Context, *UpdateMetricValueRequest) (*UpdateMetricValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricValue not implemented")
}
func (UnimplementedMetricServiceServer) UpdateMetricValueEncrypted(context.Context, *EncryptedMessage) (*UpdateMetricValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricValueEncrypted not implemented")
}
func (UnimplementedMetricServiceServer) mustEmbedUnimplementedMetricServiceServer() {}
func (UnimplementedMetricServiceServer) testEmbeddedByValue()                       {}

// UnsafeMetricServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricServiceServer will
// result in compilation errors.
type UnsafeMetricServiceServer interface {
	mustEmbedUnimplementedMetricServiceServer()
}

func RegisterMetricServiceServer(s grpc.ServiceRegistrar, srv MetricServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricService_ServiceDesc, srv)
}

func _MetricService_UpdateMetricValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_UpdateMetricValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricValue(ctx, req.(*UpdateMetricValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricService_UpdateMetricValueEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricServiceServer).UpdateMetricValueEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricService_UpdateMetricValueEncrypted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricServiceServer).UpdateMetricValueEncrypted(ctx, req.(*EncryptedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricService_ServiceDesc is the grpc.ServiceDesc for MetricService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metric.alerting.service.MetricService",
	HandlerType: (*MetricServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetricValue",
			Handler:    _MetricService_UpdateMetricValue_Handler,
		},
		{
			MethodName: "UpdateMetricValueEncrypted",
			Handler:    _MetricService_UpdateMetricValueEncrypted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/metrics.proto",
}
